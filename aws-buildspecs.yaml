version: 0.2
env:
  secrets-manager:
    AWS_DEFAULT_REGION: 'C98/FILE-STORAGE-FE-CONFIGS:AWS_DEFAULT_REGION'
phases:
  install:
    runtime-versions:
      nodejs: 18
  build:
    commands:
      - echo "y" | docker system prune -a
      - echo Logging in to Amazon ECR...
      - echo $AWS_DEFAULT_REGION
      - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin $acct_id.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - aws ecr create-repository --repository-name $repo_name || true
      - cd $CODEBUILD_SRC_DIR
      - echo $CODEBUILD_SRC_DIR
      - commit_id=$(git rev-parse --short HEAD)

      - docker build -t $acct_id.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$repo_name:$commit_id .
      - docker push $acct_id.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$repo_name:$commit_id
      - docker tag $acct_id.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$repo_name:$commit_id $acct_id.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$repo_name:latest
      - docker push $acct_id.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$repo_name:latest

      - CREDENTIALS=$(aws sts assume-role --role-arn $eks_role_arn --role-session-name codebuild-kubectl --duration-seconds 900)
      - export AWS_ACCESS_KEY_ID="$(echo ${CREDENTIALS} | jq -r '.Credentials.AccessKeyId')"
      - export AWS_SECRET_ACCESS_KEY="$(echo ${CREDENTIALS} | jq -r '.Credentials.SecretAccessKey')"
      - export AWS_SESSION_TOKEN="$(echo ${CREDENTIALS} | jq -r '.Credentials.SessionToken')"
      - export AWS_EXPIRATION=$(echo ${CREDENTIALS} | jq -r '.Credentials.Expiration')
      - aws eks update-kubeconfig --name $eks_cluster_name
      - kubectl set image deployment/file-storage-fe file-storage-fe=$acct_id.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$repo_name:$commit_id -n file-storage-fe
      - kubectl rollout restart deployment/file-storage-fe -n file-storage-fe
